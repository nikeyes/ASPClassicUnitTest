<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="ProjectHelpers.tt" #>
<#@ output extension=".cs" #>

<# CreateUnitTestMSTest(); #>


<#+
public struct TestCaseStruct
{
    public String TestContainer;
    public String TestCase;
}

public void GenerateUnitTests(List<TestCaseStruct> TestCases)
{
#>
	///<autogenerated>
	///Test unitarios Autogenerados. Cualquier modificación será reemplaza cuando se regeneren las pruebas.
	///</autogenerated>
	using System;
	using Microsoft.VisualStudio.TestTools.UnitTesting;
	using System.Net;
	using System.IO;
	using System.Text;
	using System.Linq;
	using System.Collections.Generic;
	using System.Configuration;
	using Newtonsoft.Json;
	namespace TEMPLATE.UnitTest
	{
		public class TestResult
		{
			public String ResultType {get; set;}
			public String TestName {get; set;}
			public String Description {get; set;}
		}

		[TestClass]
		public class TestRunner
		{
			private  String BASE_URL = ConfigurationManager.AppSettings["UnitTestAsp.UrlWebProject"] + @"/<#=GetProjectName()#>/TestEngine/TestASPUnitJSON.asp?UnitRunner=results";

			<#+
			foreach(TestCaseStruct testCase in TestCases)
			{
				GenerateUnitTest(testCase);
			}
			#>
		}
	}
	
<#+
}
#>

<#+
private void GenerateUnitTest(TestCaseStruct testCaseStruct)
{
#>
	[TestMethod]
	[TestCategory("<#=testCaseStruct.TestContainer#>")]
	public void <#=testCaseStruct.TestContainer#>_<#= testCaseStruct.TestCase #>Test()
	{
		StringBuilder urlAspUnitTest = new StringBuilder(); 
		urlAspUnitTest.Append(BASE_URL);
		urlAspUnitTest.Append("&cboTestContainers=");
		urlAspUnitTest.Append("<#= testCaseStruct.TestContainer #>");            
		urlAspUnitTest.Append("&cboTestCases=");
		urlAspUnitTest.Append("<#= testCaseStruct.TestCase #>");
		urlAspUnitTest.Append("&chkShowSuccess=on");
		urlAspUnitTest.Append("&cmdRun=Run%20Tests");


		WebRequest request = WebRequest.Create(urlAspUnitTest.ToString());

		ICredentials requestCredentials = CredentialCache.DefaultCredentials;
		request.Credentials = requestCredentials;

		using (WebResponse response = request.GetResponse())
		{
			using (StreamReader stream = new StreamReader(response.GetResponseStream()))
			{
				string json = stream.ReadToEnd();

				List<TestResult> results = JsonConvert.DeserializeObject<List<TestResult>>(json);;

				foreach (TestResult result in results)
				{
					Assert.IsTrue(result.ResultType == "Success", result.Description);
				}
				//Assert.IsFalse(html.Contains("Failure"));
				//Assert.IsFalse(html.Contains("Error"));
			}
		}

	}

<#+
}
#>


<#+
public List<TestCaseStruct> GetAllTestCase(String currentDir)
{

	List<TestCaseStruct> testCaseList = new List<TestCaseStruct>();

    DirectoryInfo dirInfo = new DirectoryInfo(currentDir);
    FileInfo[] files = dirInfo.GetFiles("*Tests.asp");
    
    for (int i=0; i < files.Length; i++)
    {
        FileInfo file = files[i];
        String fileName = file.Name.Replace(".asp", "");
        GetListOfTestCases(file.FullName, fileName, testCaseList);
    }

    return testCaseList;
            
}

private void GetListOfTestCases(String absolutePath, String fileName, List<TestCaseStruct> testCaseList)
{
            
    int startParseIndex, lenghtEndParse;
    string startStringParse = "Array";
    string endStringParse = "End Function";


    //Host.ResolvePath("relativePath.txt");
    string contents = File.ReadAllText(absolutePath);
    contents = contents.Replace(System.Environment.NewLine, "");
    startParseIndex = contents.IndexOf(startStringParse) + startStringParse.Length;
    lenghtEndParse = contents.IndexOf(endStringParse) - startParseIndex;
    String testCasesString = contents.Substring(startParseIndex, lenghtEndParse);
    testCasesString = testCasesString.Replace("(", "");
    testCasesString = testCasesString.Replace(")", "");
    testCasesString = testCasesString.Replace("\"", "");
    testCasesString = testCasesString.Replace("\t", "");

    String[] testCaseArray = testCasesString.Split(',');

            
    IEnumerable<TestCaseStruct> testCasesAux = testCaseArray.Select(s => new TestCaseStruct(){
                                        TestContainer = fileName,
                                        TestCase = s.Trim()
                                                        });
    testCaseList.AddRange(testCasesAux);
}   

public void CreateUnitTestMSTest()
{
    String currentDir = GetProjectPath();
	List<TestCaseStruct> TestCases = GetAllTestCase(currentDir);
	GenerateUnitTests(TestCases);
}
#>
