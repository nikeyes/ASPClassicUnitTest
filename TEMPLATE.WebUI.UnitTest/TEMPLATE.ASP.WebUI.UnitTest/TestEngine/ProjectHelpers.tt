<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
public EnvDTE.Project GetCurrentProject()
{
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    if (serviceProvider == null)
        throw new Exception("Host property returned unexpected value (null)");

    EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
    if (dte == null)
        throw new Exception("Unable to retrieve EnvDTE.DTE");

    Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
    if (activeSolutionProjects == null)
        throw new Exception("DTE.ActiveSolutionProjects returned null");

    EnvDTE.Project project = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
    if (project == null)
        throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

    return project;
}
    
private string CleanPropertyName(string name)
{
    var regex = new System.Text.RegularExpressions.Regex(@"\! | \@ | \# | \$ | \% | \^ | \& | \* | \( | \) | \+ | \= | \< | \> | \, | \.  | \/ | \\ | \? | \| | \{ | \} | \[ | \] | \: | \; | \' | \"" | \` | \~", System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace);
    return regex.Replace(name, "_");
}

private string GetProjectPath()
{
    EnvDTE.Project project = GetCurrentProject();
    System.IO.FileInfo fileInfo = new System.IO.FileInfo(project.FullName);
    return fileInfo.Directory.FullName;
}

private string GetProjectName()
{
    EnvDTE.Project project = GetCurrentProject();
    String nameProject = project.Name;
    return nameProject;
}
    
private string GetConfigPath()
{
    EnvDTE.Project project = GetCurrentProject();
    foreach (EnvDTE.ProjectItem projectItem in project.ProjectItems)
    {
        // if it is the app.config file, then open it up
        if (projectItem.Name.Equals("App.config", StringComparison.InvariantCultureIgnoreCase) || projectItem.Name.Equals("Web.config", StringComparison.InvariantCultureIgnoreCase))
            return GetProjectPath() + "\\" + projectItem.Name;
    }
    return string.Empty;
}
    
public string GetDataDirectory()
{
    EnvDTE.Project project = GetCurrentProject();
    return System.IO.Path.GetDirectoryName(project.FileName)+"\\App_Data\\";
}   
#>